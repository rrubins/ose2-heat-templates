heat_template_version: 2013-05-23
description: >
  HOT template for deploying additional OpenShift Enterprise 2.x node(s).
  Deploys an additional node with Ceph backed cinder volumes to host openshift gears.
  Use when scaling out nodes for the existing 'ose-ha' stack.
parameter_groups:
- label: General parameters
  description: General OpenShift parameters
  parameters:
  - broker1_hostname
  - broker1_floating_ip
  - node_hostname
  - load_bal_hostname
  - node_image
  - node_server_flavor
- label: Red Hat subscription
  description: >
    Red Hat Subscription Manager (RHSM) or Red Hat Network (RHN) parameters
  parameters:
  - install_method
  - rh_reg_user
  - rh_reg_pass
  - rh_reg_pool_node
  - rh_reg_act_key_node
  - rh_reg_opts
- label: Networking parameters
  description: Networking-related parameters
  parameters:
  - domain
  - hosts_domain
  - named_hostname
  - named_ip
  - cartridges
  - private_net_id
  - private_subnet_id
- label: Credentials
  description: >
    Username and password parameters for OpenShift and dependent service
  parameters:
  - mcollective_user
  - mcollective_pass
  - activemq_admin_pass
  - activemq_user_pass
  - no_scramble
parameters:
  key_name:
    description: Name of an existing keypair to enable SSH access to the instances
    type: string
  domain:
    description: Your OpenShift Application DNS domain
    type: string
  hosts_domain:
    description: Openshift hosts domain
    type: string
  primary_avail_zone:
    description: >
      Primary availability zone to ensure distribution of brokers and nodes
    type: string
  secondary_avail_zone:
    description: >
      Secondary availability zone to ensure distribution of brokers and nodes
    type: string
  tertiary_avail_zone:
    description: >
      Tertiary availability zone to ensure distribution of brokers and nodes
    type: string
  node_server_flavor:
    description: Flavor of node servers
    type: string
  node_gears_vol_size:
    description: Node cinder volume size (GB)
    type: number
  broker1_hostname:
    description: Broker 1 hostname
    type: string
  broker1_floating_ip:
    description: Broker 1 floating ip
    type: string
  node_hostname:
    description: Node hostname
    type: string
  load_bal_hostname:
    description: Load balancer hostname
    type: string
  node_image:
    description: Node image name
    type: string
  install_method:
    description: Installation method (yum rhsm rhn)
    type: string
    constraints:
    - allowed_values: [yum, rhsm, rhn]
  rh_reg_user:
    description: Red Hat registration username
    type: string
  rh_reg_pass:
    description: Red Hat registration password
    type: string
    hidden: true
  rh_reg_pool_node:
    description: Pool ID for OpenShift Node subscription
    type: string
  rh_reg_act_key_node:
    description: Optional RHN activation key for OpenShift Node subscription
    type: string
  rh_reg_opts:
    description: RHN options, e.g. --serverUrl=https://my.sat.server.com/XMLRPC
    type: string
  rhel_repo_base:
    description: RHEL Repository Base URL
    type: string
  rhel_opt_repo_base:
    description: RHEL Optional Repository Base URL
    type: string
  rhscl_repo_base:
    description: Red Hat Software Collections Repository Base URL
    type: string
  openshift_repo_base:
    description: OSE Repository Base URL
    type: string
  openshift_extra_repo_base:
    description: OSE Extra Repository Base URL
    type: string
  jboss_repo_base:
    description: JBoss Repository Base URL
    type: string
  named_hostname:
    description: named server hostname
    type: string
  named_ip:
    description: named server IP address
    type: string
  lb_vip:
    description: Load balancer virtual IP address
    type: string
  upstream_dns_ip:
    description: Upstream DNS IP address for zone transfer
    type: string
  replicants:
    description: >
      Comma-separated list (no spaces) of broker hosts (FQDN) running ActiveMQ and MongoDB
    type: string
  cartridges:
    description: >
      Cartridges to install. "all" for all cartridges; "standard" for all cartridges except for JBossEWS or JBossEAP
    type: string
  private_net_id:
    type: string
    description: ID of private network into which servers get deployed
  private_subnet_id:
    type: string
    description: ID of private sub network into which servers get deployed
  mcollective_user:
    description: MCollective username
    type: string
  mcollective_pass:
    description: MCollective password
    type: string
    hidden: true
  activemq_admin_pass:
    description: ActiveMQ admin user password
    type: string
    hidden: true
  activemq_user_pass:
    description: ActiveMQ user password
    type: string
    hidden: true
  no_scramble:
    description: Override passwords with scrambled strings or use defaults
    type: string
    constraints:
      - allowed_values: [true, false]
  ose_version:
    description: The version of OpenShift Enterprise to install
    type: string
    constraints:
    - allowed_values: [2.0, 2.1, 2.2]

resources:
  ose_node_sec_grp:
    type: AWS::EC2::SecurityGroup
    properties:
      GroupDescription: Node firewall rules
      SecurityGroupIngress:
      - {IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: 0.0.0.0/0}
      - {IpProtocol: udp, FromPort: '53', ToPort: '53', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '53', ToPort: '53', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '80', ToPort: '80', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '443', ToPort: '443', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '8000', ToPort: '8000', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '8443', ToPort: '8443', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '2303', ToPort: '2308', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '35531', ToPort: '65535', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '27017', ToPort: '27017', CidrIp: 0.0.0.0/0}

###
# Node
###
  node_port:
    type: OS::Neutron::Port
    properties:
      security_groups: [{ get_resource: ose_node_sec_grp }]
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }
  node_boot_vol:
    type: OS::Cinder::Volume
    properties:
      size: 50
      image: { get_param: node_image }
      name: node_boot_vol
      description: boot volume for node
  node_gears_vol:
    type: OS::Cinder::Volume
    properties:
      name: node_gears_vol
      description: persistent storage volume for node
      size: { get_param: node_gears_vol_size }
  node_attach_vol:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: node_instance }
      mountpoint: "/dev/vdb"
      volume_id: { get_resource: node_gears_vol }
  node_instance:
    type: OS::Nova::Server
    properties:
      name: ose_node
      block_device_mapping: [ { device_name: vda, volume_id: { get_resource: node_boot_vol } } ]      
      flavor: { get_param: node_server_flavor }
      availability_zone: { get_param: primary_avail_zone }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: node_port }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -x
            export CONF_ABORT_ON_UNRECOGNIZED_SETTINGS=false
            test -z P_BROKER_FLOATING_IP || export CONF_BROKER_IP_ADDR=P_BROKER_FLOATING_IP
            test -z P_NODE_FLOATING_IP || export CONF_NODE_IP_ADDR=P_NODE_FLOATING_IP
            test -z P_DOMAIN || export CONF_DOMAIN=P_DOMAIN
            test -z P_LOAD_BAL_HOSTNAME || export CONF_BROKER_HOSTNAME=P_LOAD_BAL_HOSTNAME
            test -z P_NODE_HOSTNAME || export CONF_NODE_HOSTNAME=P_NODE_HOSTNAME
            test -z P_NAMED_HOSTNAME || export CONF_NAMED_HOSTNAME=P_NAMED_HOSTNAME
            test -z P_NAMED_IP || export CONF_NAMED_IP_ADDR=P_NAMED_IP
            test -z P_REPLICANTS || export CONF_DATASTORE_REPLICANTS=P_REPLICANTS
            test -z P_REPLICANTS || export CONF_ACTIVEMQ_REPLICANTS=P_REPLICANTS
            test -z P_CONF_CARTRIDGES || export CONF_CARTRIDGES=P_CONF_CARTRIDGES
            test -z P_CONF_INSTALL_METHOD || export CONF_INSTALL_METHOD=P_CONF_INSTALL_METHOD
            test -z P_CONF_RH_USER || export CONF_RHN_USER=P_CONF_RH_USER
            test -z P_CONF_RH_PASS || export CONF_RHN_PASS=P_CONF_RH_PASS
            test -z P_CONF_RH_REG_POOL || export CONF_SM_REG_POOL=P_CONF_RH_REG_POOL
            test -z P_CONF_RH_REG_ACTKEY || export CONF_RHN_REG_ACTKEY=P_CONF_RH_REG_ACTKEY
            test -z P_CONF_RHN_REG_OPTS || export CONF_RHN_REG_OPTS=P_CONF_RHN_REG_OPTS
            test -z P_CONF_OSE_REPOS_BASE || export CONF_OSE_REPOS_BASE=P_CONF_OSE_REPOS_BASE
            test -z P_CONF_OSE_EXTRA_REPOS_BASE || export CONF_OSE_EXTRA_REPO_BASE=P_CONF_OSE_EXTRA_REPOS_BASE
            test -z P_CONF_JBOSS_REPO_BASE || export CONF_JBOSS_REPO_BASE=P_CONF_JBOSS_REPO_BASE
            test -z P_CONF_RHEL_REPO || export CONF_RHEL_REPO=P_CONF_RHEL_REPO
            test -z P_CONF_RHSCL_REPO || export CONF_RHSCL_REPO_BASE=P_CONF_RHSCL_REPO
            test -z P_CONF_RHEL_OPTIONAL_REPO || export CONF_RHEL_OPTIONAL_REPO=P_CONF_RHEL_OPTIONAL_REPO
            export CONF_INSTALL_COMPONENTS=node
            export CONF_ACTIONS=do_all_actions
            test -z P_CONF_MCOLLECTIVE_USER || export CONF_MCOLLECTIVE_USER=P_CONF_MCOLLECTIVE_USER
            test -z P_CONF_MCOLLECTIVE_PASSWORD || export CONF_MCOLLECTIVE_PASSWORD=P_CONF_MCOLLECTIVE_PASSWORD
            test -z P_CONF_ACTIVEMQ_ADMIN_PASSWORD || export CONF_ACTIVEMQ_ADMIN_PASSWORD=P_CONF_ACTIVEMQ_ADMIN_PASSWORD
            test -z P_CONF_ACTIVEMQ_AMQ_USER_PASSWORD || export CONF_ACTIVEMQ_AMQ_USER_PASSWORD=P_CONF_ACTIVEMQ_AMQ_USER_PASSWORD
            test -z P_CONF_NO_SCRAMBLE || export CONF_NO_SCRAMBLE=P_CONF_NO_SCRAMBLE

            # configure OSE
            curl -O https://raw.githubusercontent.com/openshift/openshift-extras/enterprise-P_OSE_VERSION/enterprise/install-scripts/generic/openshift.sh -k
            chmod +x ./openshift.sh
            ./openshift.sh 2>&1 | tee /tmp/openshift.out
            setenforce 1
            cd /etc/init.d
            for i in `ls cloud-*`; do chkconfig $i off; done

            # configure attached storage and move ose dirs
            parted --script /dev/vdb -- mklabel msdos
            parted --script /dev/vdb -- mkpart primary 1024 5G
            parted --script /dev/vdb -- mkpart primary 5G -1s
            partx -a /dev/vdb
            mkfs.ext4 /dev/vdb1
            mkfs.ext4 /dev/vdb2
            mkdir /var/lib/node_share
            mount /dev/vdb1 /var/lib/node_share
            mkdir /var/lib/node_share/etc_openshift
            service ruby193-mcollective stop
            shopt -s dotglob
            mv /etc/openshift/* /var/lib/node_share/etc_openshift
            chcon --reference /etc/openshift /var/lib/node_share/etc_openshift
            echo "/dev/vdb1 /var/lib/node_share ext4 defaults" >> /etc/fstab
            echo "/var/lib/node_share/etc_openshift /etc/openshift none bind,auto" >> /etc/fstab
            mount /etc/openshift
            mount /dev/vdb2 /mnt
            mv /var/lib/openshift/* /mnt
            chcon --reference /var/lib/openshift /mnt
            umount /mnt
            echo "/dev/vdb2 /var/lib/openshift ext4 usrquota,defaults" >> /etc/fstab
            mount /var/lib/openshift
            quotacheck --create-files --no-remount --user --group /var/lib/openshift
            restorecon /var/lib/openshift/aquota.user
            quotaon /var/lib/openshift
            service ruby193-mcollective start
            yum install -y vim mlocate telnet lsof nmap
            reboot

          params:
            P_BROKER_FLOATING_IP: { get_param: broker1_floating_ip }
            P_NODE_FLOATING_IP: { get_attr: [ node_port, fixed_ips, 0, ip_address ] }
            P_DOMAIN: { get_param: domain }
            P_HOSTS_DOMAIN: { get_param: hosts_domain }
            P_LOAD_BAL_HOSTNAME: { get_param: load_bal_hostname }
            P_NODE_HOSTNAME: { get_param: node_hostname }
            P_NAMED_HOSTNAME: { get_param: named_hostname }
            P_NAMED_IP: { get_param: broker1_floating_ip }
            P_REPLICANTS: { get_param: replicants }
            P_CONF_CARTRIDGES: { get_param: cartridges }
            P_CONF_INSTALL_METHOD: { get_param: install_method }
            P_CONF_RH_USER: { get_param: rh_reg_user }
            P_CONF_RH_PASS: { get_param: rh_reg_pass }
            P_CONF_RH_REG_POOL: { get_param: rh_reg_pool_node }
            P_CONF_RH_REG_ACTKEY: { get_param: rh_reg_act_key_node }
            P_CONF_RHN_REG_OPTS: { get_param: rh_reg_opts}
            P_CONF_OSE_REPOS_BASE: { get_param: openshift_repo_base }
            P_CONF_OSE_EXTRA_REPOS_BASE: { get_param: openshift_extra_repo_base }
            P_CONF_JBOSS_REPO_BASE: { get_param: jboss_repo_base }
            P_CONF_RHEL_REPO: { get_param: rhel_repo_base }
            P_CONF_RHSCL_REPO: { get_param: rhscl_repo_base }
            P_CONF_RHEL_OPTIONAL_REPO: { get_param: rhel_opt_repo_base }
            P_OSE_VERSION: { get_param: ose_version }
            P_CONF_MCOLLECTIVE_USER: { get_param: mcollective_user }
            P_CONF_MCOLLECTIVE_PASSWORD: { get_param: mcollective_pass }
            P_CONF_ACTIVEMQ_ADMIN_PASSWORD: { get_param: activemq_admin_pass }
            P_CONF_ACTIVEMQ_AMQ_USER_PASSWORD: { get_param: activemq_user_pass }
            P_CONF_NO_SCRAMBLE: { get_param: no_scramble }

outputs:
  node_instance_ip:
    description: IP address of the Node instance
    value: { get_attr: [ node_instance, first_address] }
